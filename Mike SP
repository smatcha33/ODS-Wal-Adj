create or replace procedure utils.test(table_list string)
  returns varchar not null
  language sql
  execute as caller
as
$$
  declare
    res resultset default (select value::string as table_name from table(flatten(input => split(:table_list, ',')))); 
    c1 cursor for res;
    sql varchar;
  begin    
    sql := 'sql: ';
    open c1;
    for rec in c1 do
        sql := sql || 'select * from ' || rec.table_name || '; \n';
    end for;
    close c1;
    return sql;    
  end;
$$
;

set tbls = 'tbl1,tbl2,tbl3';
call  prd_common.utils.test($tbls);

--------------------------------------------------------2nd query---------------------
/*** TEST TABLE ***/
    create or replace table PRD_COMMON.UTILS.TABLE_TEST
    (
        schema_name string,
        table_name string,
        dt date
    );
    
    insert into PRD_COMMON.UTILS.TABLE_TEST (schema_name, table_name, dt)
    values 
    ('schema1','tbl_a', '2023-01-01'),
    ('schema2','tbl_b', '2023-02-01'),
    ('schema3','tbl_c', '2023-03-01')
    ;
/*** UDF ***/
CREATE OR REPLACE FUNCTION PRD_COMMON.UTILS.TABLE_HWM(table_list string)
  RETURNS date NOT NULL
AS
$$
    with v as (
        select 
            split(value, '.') as v,
            v[0]::string as schema_name,
            v[1]::string as table_name
        from table(FLATTEN(INPUT => split(table_list, ',')))
    )
    select max(tt.dt) as max_dt
    from PRD_COMMON.UTILS.TABLE_TEST tt
    join v
    on tt.schema_name = v.schema_name and tt.table_name = v.table_name
$$
;
/*** TEST ***/
set tbl_list = 'schema1.tbl_a,schema2.tbl_b,schema3.tbl_c';
select PRD_COMMON.UTILS.TABLE_HWM($tbl_list);
